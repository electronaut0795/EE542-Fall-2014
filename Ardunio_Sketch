#include <ps2.h>

#include <Servo.h> 

#include <Wire.h> //I2C Arduino Library

#define address 0x1E //0011110b, I2C 7bit address of HMC5883


int diraPin = 7; 
int dirbPin = 8; //These two have to be opposite digital values to spin the motor if they are both HIGH or both LOW then the motor is actually braked

int enablePin = 6; //This pin sets the speed of the motor and needs to be a PWM pin.


int dira2Pin = 12; 
int dirb2Pin = 5;
int enable2Pin = 9; // These are used in the same way to drive the second motor. 
int val = 255;// Variable used to set the speed of the motors.
int command; 
int dist;
int ang;

int bumpedLeft = 0;
int bumpedRight = 0; 

unsigned long button_time = 0;  
unsigned long last_button_time = 0; 


float x = 0.0;
float y = 0.0;


//const int pingPin = ;


Servo myservo;  // create servo object to control a servo 
// a maximum of eight servo objects can be created 

int deg = 90; 

void setup() {
  attachInterrupt(0, bumpLeft, RISING);
  attachInterrupt(1, bumpRight, RISING);
  pinMode(diraPin, OUTPUT);
  pinMode(dirbPin, OUTPUT);
  pinMode(enablePin, OUTPUT); 
  pinMode(dira2Pin, OUTPUT);
  pinMode(dirb2Pin, OUTPUT);
  pinMode(enable2Pin, OUTPUT); // Declares all of the pins as outputs. 
  pinMode(A0, OUTPUT);
  pinMode(A1, OUTPUT);
  pinMode(A2, OUTPUT);
  pinMode(13, OUTPUT);
  Serial.begin(115200);
  myservo.attach(A1); 
  test_connection();
  mouse_init();

  Wire.begin();
  Wire.beginTransmission(address); //open communication with HMC5883
  Wire.send(0x02); //select mode register
  Wire.send(0x00); //continuous measurement mode
  Wire.endTransmission();
}

/* mouse(CLOCK, DATA)*/
PS2 mouse(11, 10);

void loop() {

  digitalWrite(13, LOW);

  myservo.write(deg);


  if(bumpedLeft == 1){
    Serial.println("Bumped on the left.");
    stopmove();
    delay(400);
    x = 0;
    y = 0;

    while(y < 100){
      backward();
      checkMouse(); 
      Serial.print("X= ");
      Serial.print(x, DEC);   
      Serial.print("\tY= ");
      Serial.print(y, DEC);
      Serial.println(); 
    }
    stopmove();
    x=0;
    y=0;
    bumpedLeft = 0;
  }

  if(bumpedRight == 1){
    Serial.println("Bumped on the right.");
    stopmove();
    delay(400);
    x = 0;
    y = 0;

    while(y < 100){
      backward();
      checkMouse(); 
      Serial.print("X= ");
      Serial.print(x, DEC);   
      Serial.print("\tY= ");
      Serial.print(y, DEC);
      Serial.println(); 
    }
    stopmove();
    // x=0;
    //y=0;

    bumpedRight = 0;
  }

  checkMouse(); 

  if (Serial.available() > 0) {
    command = Serial.read();

    if (command == 'w'){
      dist = Serial.read();
      shake();

      if (dist == '1'){
        while(y > -1000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }

      if (dist == '2'){
        while(y > -2000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }

      if (dist == '3'){
        while(y > -3000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }

      if (dist == '4'){
        while(y > -4000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }

      if (dist == '5'){
        while(y > -5000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }
      if (dist == '6'){
        while(y > -6000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }
      if (dist == '7'){
        while(y > -7000 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          forward();
          checkMouse(); 
          checkbumped();
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }


    }

    if (command == 's'){
      shake();
      while(y < 1000 && bumpedRight == 0 && bumpedLeft ==0){
        delay(10);
        backward();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(400);
      x = 0;
      y = 0;

    }

    if (command == 'a'){
      shake();
      ang = Serial.read();
      if (ang == '1'){
        while(x < 200 && bumpedRight == 0 && bumpedLeft == 0){
          delay(10);
          turnleft();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }    
      if (ang == '2'){
        while(x < 500 && bumpedRight == 0 && bumpedLeft == 0){
          delay(10);
          turnleft();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }    
      if (ang == '3'){
        while(x < 800 && bumpedRight == 0 && bumpedLeft == 0){
          delay(10);
          turnleft();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }    

      if (ang == '4'){
        while(x < 2500 && bumpedRight == 0 && bumpedLeft == 0){
          delay(10);
          turnleft();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(400);
        x = 0;
        y = 0;
      }  
    }

    if (command == 'e'){
      forward();
      delay(300);
      stopmove();
    }

    if (command == 'd'){
      shake();
      ang = Serial.read();
      if (ang == '1'){
        while(x > -200 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          turnright();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(800);
        x = 0;
        y = 0;
      }
      if (ang == '2'){
        while(x > -500 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          turnright();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(800);
        x = 0;
        y = 0;
      }
      if (ang == '3'){
        while(x > -800 && bumpedRight == 0 && bumpedLeft ==0){
          delay(10);
          turnright();
          checkMouse(); 
          Serial.print("X= ");
          Serial.print(x, DEC);   
          Serial.print("\tY= ");
          Serial.print(y, DEC);
          Serial.println(); 
        }
        stopmove();
        delay(800);
        x = 0;
        y = 0;
      }
    }

    if (command == 'p'){
      pingSonar(); 
    }

    if (command == 'j'){
      servoLeft(); 
    }

    if (command == 'k'){
      servoRight(); 
    }

    if (command == 'm'){
      sweep(); 
    }

    if (command == 'n'){
      /* send the data back up */

      Serial.print("X= ");
      Serial.print(x, DEC);   
      Serial.print("\tY= ");
      Serial.print(y, DEC);
      Serial.println(); 
    }

    if (command == 'b'){
      x = 0;
      y = 0; 

    }

    if (command == 'c'){

      pinMode(A2, OUTPUT);
      digitalWrite(A2, HIGH);
      delay(100);
      digitalWrite(A2, LOW);

    }

    if  (command == 'r'){

      shake();
      while(y > -12000){
        delay(10);
        forward();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;

      shake();
      while(x < 2000){
        delay(10);
        turnleft();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;
      shake();
      while(y > -12000){
        delay(10);
        forward();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;
      shake();
      while(x < 2000){
        delay(10);
        turnleft();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;      
      while(y > -12000){
        delay(10);
        forward();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;
      shake();
      while(x < 2000){
        delay(10);
        turnleft();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;
      shake();
      while(y > -12000){
        delay(10);
        forward();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;

      shake();
      while(x < 2000){
        delay(10);
        turnleft();
        checkMouse(); 
        Serial.print("X= ");
        Serial.print(x, DEC);   
        Serial.print("\tY= ");
        Serial.print(y, DEC);
        Serial.println(); 
      }
      stopmove();
      delay(800);
      x = 0;
      y = 0;

    }

    if  (command == 'g'){

      int sensorValue = analogRead(A3);
      //Serial.print("Sensor reads: ");
      Serial.println(sensorValue);

    }

    if (command == 'h'){
      int x,y,z; //triple axis data

      //Tell the HMC5883 where to begin reading data
      Wire.beginTransmission(address);
      Wire.send(0x03); //select register 3, X MSB register
      Wire.endTransmission();


      //Read data from each axis, 2 registers per axis
      Wire.requestFrom(address, 6);
      if(6<=Wire.available()){
        x = Wire.receive()<<8; //X msb
        x |= Wire.receive(); //X lsb
        z = Wire.receive()<<8; //Z msb
        z |= Wire.receive(); //Z lsb
        y = Wire.receive()<<8; //Y msb
        y |= Wire.receive(); //Y lsb
      }

      //Print out values of each axis
      /*Serial.print("x: ");
       Serial.print(x);
       Serial.print("  y: ");
       Serial.print(y);
       Serial.print("  z: ");
       Serial.println(z);
       */

      float heading = atan2(y, x);

      heading -= .223; 

      // Correct for when signs are reversed.
      if(heading < 0)
        heading += 2*PI;

      // Convert radians to degrees for readability.
      float headingDegrees = heading * 180/M_PI; 

      Serial.println(headingDegrees);
    }

    if(command =='z'){
      shake();
    }

  }
}


void shake(){
  turnleft();
  delay(50);
  turnright();
  delay(55);
  stopmove();
}

void checkMouse(){
  char mstat;
  char mx;
  char my;


  mouse.write(0xeb);  // give me data!
  mouse.read();      // ignore ack
  mstat = mouse.read();

  mx = mouse.read();
  my = mouse.read();


  x = x + (float)mx;
  y = y + (float)my; 


}

void backward(){
  //Spin motor 1 backward for one second
  analogWrite(enablePin, val); // Set the speed of the motors with PWM
  digitalWrite(diraPin, LOW);
  digitalWrite(dirbPin, HIGH);

  //spin motor 2 backward for one second
  analogWrite(enable2Pin, val);
  digitalWrite(dira2Pin, HIGH);
  digitalWrite(dirb2Pin, LOW);

}

void forward(){
  analogWrite(enablePin, val);
  analogWrite(enable2Pin, val);
  //spin motor 1 forward for one second
  digitalWrite(diraPin, HIGH);
  digitalWrite(dirbPin, LOW);

  //spin motor 2 forward for one second
  digitalWrite(dira2Pin, LOW);
  digitalWrite(dirb2Pin, HIGH);

}

void turnleft(){
  analogWrite(enablePin, val);
  analogWrite(enable2Pin, val);
  digitalWrite(diraPin, HIGH);
  digitalWrite(dirbPin, LOW);

  //spin motor 2 forward for one second
  digitalWrite(dira2Pin, HIGH);
  digitalWrite(dirb2Pin, LOW);

}

void turnright(){
  analogWrite(enablePin, val);
  analogWrite(enable2Pin, val);
  digitalWrite(diraPin, LOW);
  digitalWrite(dirbPin, HIGH);

  //spin motor 2 forward for one second
  digitalWrite(dira2Pin, LOW);
  digitalWrite(dirb2Pin, HIGH);
}

void stopmove(){
  analogWrite(enablePin, 0);
  analogWrite(enable2Pin, 0);
}

void pingSonar(){
  long duration, inches, cm;

  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(A0, OUTPUT);
  digitalWrite(A0, LOW);
  delayMicroseconds(2);
  digitalWrite(A0, HIGH);
  delayMicroseconds(5);
  digitalWrite(A0, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH
  // pulse whose duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(A0, INPUT);
  duration = pulseIn(A0, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);

  Serial.print(cm);
  Serial.print(" ");
  Serial.print(deg);
  //Serial.print(" degrees");
  Serial.println();

  delay(100);
}

long microsecondsToInches(long microseconds)
{
  // According to Parallax's datasheet for the PING))), there are
  // 73.746 microseconds per inch (i.e. sound travels at 1130 feet per
  // second).  This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  // See: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
  return microseconds / 74 / 2;
}

long microsecondsToCentimeters(long microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the
  // object we take half of the distance travelled.
  return microseconds / 29 / 2;
}

void servoLeft(){
  if(deg < 0){
    deg = 0;
  }

  if (deg > 0){
    deg = deg - 1;
    myservo.write(deg);  
    delay(15);
  }
}

void servoRight(){
  if(deg > 180){
    deg = 180;
  }

  if (deg < 180){
    deg = deg + 1;
    myservo.write(deg);  
    delay(15);
  }
}

void sweep() {
  myservo.write(0);
  delay(500);

  for(deg = 20; deg < 160; deg += 5)  // goes from 0 degrees to 180 degrees 
  {                                  // in steps of 1 degree 
    myservo.write(deg);              // tell servo to go to position in variable 'pos' 
    delay(500);                       // waits 15ms for the servo to reach the position 
    pingSonar();
  } 
}

void mouse_init(){
  mouse.write(0xff);  // reset
  mouse.read();  // ack byte
  mouse.read();  // blank */
  mouse.read();  // blank */
  mouse.write(0xf0);  // remote mode
  mouse.read();  // ack
  delayMicroseconds(100);

  Serial.println("Connected to mouse.");
}

void test_connection(){
  int connection = 0;
  while (connection == 0) {
    if (Serial.available() > 0){
      connection = 1;
    }  
    delay(15); 
  }
  Serial.println("Connected to Grunt #3."); 
}

void bumpLeft(){

  if (button_time - last_button_time > 250){
    last_button_time = button_time;
    bumpedLeft = 1;
  }
}

void bumpRight(){

  if (button_time - last_button_time > 250){
    last_button_time = button_time;
    stopmove();
    bumpedRight = 1;
  }
}

void checkbumped(){

  bumpedRight = digitalRead(2);
  bumpedLeft = digitalRead(3);

}



























